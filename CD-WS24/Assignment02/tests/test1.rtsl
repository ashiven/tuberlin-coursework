/*
  Test 1, simple if/else.
  Lexical and parsing error-free.


  The second function in GLSL gets parsed as:

  translation_unit ->
  external_declaration -> 
  function_definition -> 
  function_prototype compound_statement_no_new_scope ->
  function_declarator RIGHT_PAREN compound_statement_no_new_scope ->
  function_header_with_parameters RIGHT_PAREN compound_statement_no_new_scope -> 
  function_header parameter_declaration RIGHT_PAREN compound_statement_no_new_scope -> 
  fully_specified_type IDENTIFIER LEFT_PAREN parameter_declarator RIGHT_PAREN compound_statement_no_new_scope ->
  fully_specified_type IDENTIFIER LEFT_PAREN type_specifier IDENTIFIER RIGHT_PAREN compound_statement_no_new_scope ->
  type_specifier IDENTIFIER LEFT_PAREN type_specifier IDENTIFIER RIGHT_PAREN compound_statement_no_new_scope ->
  type_specifier_nonarray IDENTIFIER LEFT_PAREN type_specifier_nonarray IDENTIFIER RIGHT_PAREN compound_statement_no_new_scope ->
  FLOAT IDENTIFIER LEFT_PAREN INT IDENTIFIER RIGHT_PAREN compound_statement_no_new_scope ->

  ... 

  compound_statement_no_new_scope is a simple_statement which is a 
  selection_statement that containins two jump_statement 

*/ 

class Test1 : rt_Material;

float foo(int i) {    // function_header_with_parameters
  if(i<0)             // selection_statement until line 34
    return 0.0;       // jump_statement
  else
    return 1.0;       // jump_statement
}


void shade() {
  int i;
  float f;

  i = 0;              // statement->simple_statement->expression_statement->assignment_expression
  f = foo(i);         // ... ->postfix_expression->function_call

  rt_SampleColor = color(f);
}
